- name: define the StorageClass on microk8s (ubuntu / rhel)
  # EXTERNAL INPUTS #####################################################
  #   config : a subdir in vars/configs with yaml config files
  hosts: microk8s_servers
  tasks:

  # INPUTS ##############################################################
  - name: '[INPUT] Include vars of microk8s_namespace.yml in microk8s_NS_file_content'
    ansible.builtin.include_vars:
      file: 'vars/configs/{{config}}/microk8s_namespace.yml'
      name: microk8s_NS_file_content

  - name: '[INPUT] Include vars of microk8s_csi_driver_nfs.yml in microk8s_CDN_file_content'
    ansible.builtin.include_vars:
      file: vars/microk8s_csi_driver_nfs.yml
      name: microk8s_CDN_file_content

  - name: '[INPUT] Include vars of microk8s_storage_class.yml in microk8s_SC_file_content'
    ansible.builtin.include_vars:
      file: 'vars/configs/{{config}}/microk8s_storage_class.yml'
      name: microk8s_SC_file_content

  - name: '[INPUT] Include vars of microk8s_persistent_volume_claim.yml in microk8s_PVC_file_content'
    ansible.builtin.include_vars:
      file: 'vars/configs/{{config}}/microk8s_persistent_volume_claim.yml'
      name: microk8s_PVC_file_content
  # USE some variables like name if exist or create new ones    

  # create missing value, add IF (ternary ?)
  - name: '[INPUT_COMPUTE] IF StorageClass fullname parameter exist, register it'
    set_fact:
      storage_class_name: "{{ microk8s_SC_file_content.metadata.name.fullname }}"
    when: microk8s_SC_file_content.metadata.name.fullname is defined

  - name: '[INPUT_COMPUTE] ELSE compute StorageClass fullname from StorageClass suffix parameter'
    set_fact:
      storage_class_name: "sc-csi-nfs-{{ microk8s_SC_file_content.metadata.name.suffix }}"
    when: microk8s_SC_file_content.metadata.name.fullname is not defined

  # CREATING ############################################################
  - name: '[FILE] create temporary directory for configuration files'
    # modify file content with variables
    # SC
    ansible.builtin.tempfile:
      state: directory
      suffix: ansible
    register: tmp_ansible_dir_handler

  - name: '[REPORT] show templating results'
    ansible.builtin.debug:
      msg: "{{ lookup('ansible.builtin.template', 'resources/templates/microk8s-storage_class.j2') }}"

  - name: '[FILE] create StorageClass file'
    #ansible.builtin.copy:
    ansible.builtin.template:
      dest: "{{ tmp_ansible_dir_handler.path }}/sc.yml"
      #content: "{{ microk8s_SC_file_content | to_nice_yaml( width=50, explicit_start=True, explicit_end=false) }}"
      src: resources/templates/microk8s-storage_class.j2
      group: sys
      owner: root
      mode: 0555
    register: sc_file_handler

  - name: '[SHELL] apply the StorageClass file to microk8s'
    ansible.builtin.shell: 
      cmd: 'microk8s kubectl apply --namespace {{ microk8s_NS_file_content.metadata.name }} --output yaml -f - < {{ sc_file_handler.dest }}'
    register: microk8s_sc_apply_status
    failed_when: microk8s_sc_apply_status.rc > 0
    changed_when: false
  - set_fact:
      microk8s_status_yaml: "{{ microk8s_sc_apply_status.stdout | from_yaml }}"

  - name: '[FILE] remove file/directory'
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_items:
      - sc_file_handler.dest
      - tmp_ansible_dir_handler.path
    when: sc_file_handler.dest is defined

  # PATCHING DEFAULT ###################################################
  - name: '[VAR] define variables'
    set_fact:
      false_is_default_patch: '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
      true_is_default_patch: '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
    when:
      - microk8s_SC_file_content.metadata.default == true
  
  - name: '[SHELL] get storageclasses.storage.k8s.io'
    ansible.builtin.shell:
      cmd: 'microk8s kubectl get storageclasses.storage.k8s.io --output yaml'
    register: storageclasses_ante
    when:
      - microk8s_SC_file_content.metadata.default == true
    
  - name: '[SHELL] remove default tag to all'
    ansible.builtin.shell:
      cmd: "microk8s kubectl patch storageclasses.storage.k8s.io {{ item.metadata.name }} -p '{{ false_is_default_patch }}'"
    with_items: '{{ (storageclasses_ante.stdout | from_yaml)["items"] }}'
    when:
      - microk8s_SC_file_content.metadata.default == true

  - name: '[SHELL] get storageclasses.storage.k8s.io'
    ansible.builtin.shell:
      cmd: 'microk8s kubectl get storageclasses.storage.k8s.io --output yaml'
    register: storageclasses
    when:
      - microk8s_SC_file_content.metadata.default == true

  - name: '[SHELL] add default tag to current'
    ansible.builtin.shell:
      cmd: "microk8s kubectl patch storageclasses.storage.k8s.io {{ storage_class_name }} -p '{{ true_is_default_patch }}'"
    when:
      - microk8s_SC_file_content.metadata.default == true  
