- name: install csi nfs driver on microk8s (ubuntu / rhel)
  # REQUIREMENT: daemonize on servers
  hosts: microk8s_servers
  tasks:
  # INPUTS ##############################################################
  - name: Include vars of prometheus_community.yml in prometheus_community_file_content
    ansible.builtin.include_vars:
      file: vars/prometheus_community.yml
      name: prometheus_community_file_content

  # HELM3 ##############################################################
  # WARN: on some version helm4 is enable and can't be disabled
  - name: enable HELM3
    ansible.builtin.command:
      cmd: 'microk8s enable helm3'
    register: enable_helm3_status
    failed_when: enable_helm3_status.rc > 0

  - name: valid HELM3
    ansible.builtin.command:
      cmd: 'microk8s status --format yaml'
    register: microk8s_status
    failed_when: microk8s_status.rc > 0
    changed_when: false
  - set_fact:
      microk8s_status_yaml: "{{ microk8s_status.stdout | from_yaml }}"

  - name: test the enable status of helm3
    set_fact:
      helm3_status_str: '{{ item.status }}'
    when: (item.name|string == 'helm3')
    with_items:
    - '{{ microk8s_status_yaml.addons }}'
    failed_when: helm3_status_str not in "enabled"

  # NAMESPACE ##########################################################
  - name: create the namespace
    ansible.builtin.command:
      cmd: 'microk8s kubectl create namespace monitoring'
    register: namespaces_status
    failed_when:
    - namespaces_status.rc > 0
    - not '"Error from server (AlreadyExists)" in namespaces_status.stdout'

  - name: valid namespace creation
    ansible.builtin.command:
      cmd: 'microk8s kubectl get namespaces -A'
    register: namespaces_status
    until: '"monitoring" in namespaces_status.stdout'

  # INSTALLING #######################################################
  - name: install the repository with HELM3
    ansible.builtin.command:
      cmd: 'microk8s helm3 repo add  -n monitoring {{prometheus_community_file_content.metadata.repository.name}} {{prometheus_community_file_content.metadata.repository.url}}'
    register: install_repository_status
    failed_when:
    - install_repository_status.rc > 0
    - not '"already exists with the same configuration, skipping" in install_repository_status.stdout'

  - name: update the repository with HELM3
    ansible.builtin.command:
      cmd: 'microk8s helm3 repo update -n monitoring'

  - name: install the packet with HELM3
    ansible.builtin.command:
      cmd: 'microk8s helm3 install -n monitoring {{prometheus_community_file_content.metadata.packet.name}} {{prometheus_community_file_content.metadata.repository.name}}/{{prometheus_community_file_content.metadata.packet.name}} --output yaml'
    register: install_packet_status
    failed_when:
    - install_packet_status.rc > 0
    - not '"cannot re-use a name that is still in use" in install_packet_status.stdout'
  - set_fact:
      install_packet_status_yaml: "{{ install_packet_status.stdout | from_yaml }}"

  # LAUNCHING #######################################################
  # TODO: idea for further tests
  # microk8s kubectl --namespace monitoring get pods -l "release=kube-prometheus-stack" --output yaml
  - name: prometheus port report
    set_fact:
      host_address_ipv4_str: '{{item}}'
    when: '"192.168.127" in item'
    with_items:
    - "{{ hostvars[inventory_hostname].ansible_facts.all_ipv4_addresses }}"
  
  # TODO: is such a good idea to do a .service file (with copy/content) on the server then launch it ? 
  - name: Create a temporary directory
    ansible.builtin.tempfile:
      state: directory
      suffix: scripts
    register: temp_directory_scripts

  - name: test the port to ensure not used
    ansible.builtin.shell:
      cmd: 'netstat -ltp | grep {{prometheus_community_file_content.metadata.prometheus.host.port}} | wc -w'
    register: port_status_unused
    failed_when:
      - port_status_unused.stdout != "0"

  - name: prometheus pid report
    ansible.builtin.debug:
        var: port_status_unused    

  # DEPRECATED : have been replaced by a DAEMONIZE script
  #- name: 'forwarding Prometheus port on {{host_address_ipv4_str}}:{{prometheus_community_file_content.metadata.prometheus.host.port}}'
  #  ansible.builtin.script:
  #    cmd: /mnt/scripts/ansible/install_microk8s/production/resources/scripts/prometheus_forwarding_port.sh {{host_address_ipv4_str}} {{prometheus_community_file_content.metadata.prometheus.host.port}}
  #  register: forwarding_prometheus_port_script_output
  
  - name: copy script production/resources/scripts/prometheus_forwarding_port.sh to server  
    ansible.builtin.copy:
      src: /mnt/scripts/ansible/install_microk8s/production/resources/scripts/prometheus_forwarding_port.sh
      dest: "{{ temp_directory_scripts.path }}"
      mode: '0744'
    register: forwarding_prometheus_port_script_file_status

  - name: create launcher (templatize script)
    ansible.builtin.copy:
      content: "#!/usr/bin/bash\n{{ forwarding_prometheus_port_script_file_status.dest }} {{host_address_ipv4_str}} {{prometheus_community_file_content.metadata.prometheus.host.port}}"
      dest: "{{ temp_directory_scripts.path }}/prometheus_forwarding_port_launcher.sh"
      mode: '0744'
    register: forwarding_prometheus_port_script_launcher_file_status

  - name: daemonize script
    ansible.builtin.shell:
      cmd: 'daemonize {{ forwarding_prometheus_port_script_launcher_file_status.dest }}'
    register: daemonize_status

  - name: remove the script launcher
    ansible.builtin.file:
      path: "{{ forwarding_prometheus_port_script_launcher_file_status.dest }}"
      state: absent
    when: temp_directory_scripts.path is defined            

  - name: remove the script file prometheus_forwarding_port.sh
    ansible.builtin.file:
      path: "{{ temp_directory_scripts.path }}/prometheus_forwarding_port.sh"
      state: absent
    when: temp_directory_scripts.path is defined        

  - name: remove the temporary directory
    ansible.builtin.file:
      path: "{{ temp_directory_scripts.path }}"
      state: absent
    when: temp_directory_scripts.path is defined

  - name: test the port to ensure used
    ansible.builtin.shell:
      cmd: 'netstat -ltp | grep {{prometheus_community_file_content.metadata.prometheus.host.port}}'
    register: port_status_used
    failed_when: 
      - '"9890"     not in port_status_used.stdout'
      - '"tcp"      not in port_status_used.stdout'
      - '"LISTEN"   not in port_status_used.stdout'
      - '"kubectl"  not in port_status_used.stdout'
      - port_status_used.rc != 0 
    
  - name: 'test the prometheus service on {{host_address_ipv4_str}}:{{prometheus_community_file_content.metadata.prometheus.host.port}}'
    ansible.builtin.uri:
      url: 'http://{{host_address_ipv4_str}}:{{prometheus_community_file_content.metadata.prometheus.host.port}}'
      method: GET
      status_code: 200

  # REPORTING ##########################################################
  - name: extract pid
    set_fact:
      daemon_pid: "{{ item.split()[-1].split('/')[0]|trim }}"
    with_items:
    - "{{ port_status_used.stdout_lines }}"
  - name: prometheus pid report
    ansible.builtin.debug:
        msg: "deamon pid on host : {{daemon_pid}}"

  - name: prometheus port report
    ansible.builtin.debug:
      msg: "open on host port : {{host_address_ipv4_str}}:{{prometheus_community_file_content.metadata.prometheus.host.port}}"
    







